name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        python: ['3.12', '3.13']

    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_PYTHON_VERSION_WARNING: 1
      POETRY_VERSION: 2.1.1

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python ${{ matrix.python }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python }}
      - name: Setup Poetry
        run: |
          python -m pip install --upgrade pip
          python -m pip install "poetry==${{ env.POETRY_VERSION }}"
          poetry --version
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true
          poetry config installer.max-workers 4
      - name: Cache venv
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-py${{ matrix.python }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            venv-${{ runner.os }}-py${{ matrix.python }}-
      - name: Cache Poetry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ~/.cache/pip
          key: wheels-${{ runner.os }}-py${{ matrix.python }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            wheels-${{ runner.os }}-py${{ matrix.python }}-
      - name: Install dependencies
        run: poetry install --no-ansi --no-root
      - name: Lint
        run: poetry run ruff check .
      - name: Type Checking
        run: poetry run mypy me_ai
      - name: Pytest
        run: poetry run pytest -q --cov=me_ai --cov-report=term-missing
